// Doc: https://www.prisma.io/docs/orm/overview/databases/mongodb

// To update client (code type definition) to reflect changes to this file:
// npx prisma generate

// To update the schema of the actual database to reflect changes to this file:
// (You may be warned of data loss in the process)
// npx prisma db push

// Project conventions:
//   - All models in titlecase
//   - All fields in lowercase
//   - All relations explicitly named (@relation(name: ""))
//   - All fields that is an array type has plural field names
//   - Written order: attributes, foreign keys, relations
//   - "updatedAt" fields are updated automatically, while "lastUpdated" fields should be manually updated

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

//////////////////////
// Group A: User-related
//////////////////////

// Some fields in this model are used by lucia-auth
model User {
  id                     String         @id @default(auto()) @map("_id") @db.ObjectId
  username               String         @unique
  email                  String         @unique
  password               String
  createdAt              DateTime       @default(now()) @db.Date
  accountInfoLastUpdated DateTime
  role                   Role           @default(USER)
  userConfig             UserConfig
  userCryptoInfo         UserCryptoInfo
  suspended              Boolean        @default(false)
  onBoardingCompleted    Boolean        @default(false)

  followers         UserFollow[]       @relation(name: "UserFollowTarget")
  followedUsers     UserFollow[]       @relation(name: "UserFollow")
  sessions          Session[]          @relation(name: "UserSession")
  posts             Post[]             @relation(name: "UserPost")
  moderationRecords ModerationRecord[] @relation(name: "UserModerationRecord")
  moderationHits    ModerationRecord[] @relation(name: "UserModerationHit")
  postLikes         PostLike[]         @relation(name: "UserPostLike")
  postSaves         PostSave[]         @relation(name: "UserPostSave")
  notifications     Notification[]     @relation(name: "UserNotification")
}

enum Role {
  USER
  VERIFIED_USER
  ADMIN
}

type UserConfig {
  displayName String   @default("")
  avatarUrl   String?
  bannerUrl   String?
  bio         String   @default("")
  lastUpdated DateTime @default(now()) @db.Date
}

type UserCryptoInfo {
  cryptoBookmarks String[] // remark: list of cryptoIds
  cryptoHoldings  CryptoHolding[]
  lastUpdated     DateTime        @default(now()) @db.Date
}

type CryptoHolding {
  cryptoId String
  amount   Float
}

// This model is used by lucia-auth
model Session {
  trueId    String   @id @default(auto()) @map("_id") @db.ObjectId
  id        String   @unique
  expiresAt DateTime @db.Date

  userId String @db.ObjectId

  user User @relation(name: "UserSession", references: [id], fields: [userId], onDelete: Cascade)
}

model UserFollow {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  initiatorId String @db.ObjectId
  targetId    String @db.ObjectId

  initiator User @relation("UserFollow", references: [id], fields: [initiatorId], onDelete: Cascade)
  target    User @relation("UserFollowTarget", references: [id], fields: [targetId], onDelete: Cascade)

  @@unique([initiatorId, targetId])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  link      String?
  unread    Boolean  @default(true)
  createdAt DateTime @default(now())
  expiry    DateTime

  receiverId String @db.ObjectId

  receiver User @relation(name: "UserNotification", references: [id], fields: [receiverId], onDelete: Cascade)
}

//////////////////////
// Group B: Post-related
//////////////////////

model Post {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  content         String
  createdAt       DateTime         @default(now())
  userMedia       UserMedia[]
  textualContexts TextualContext[]
  suspended       Boolean          @default(false)
  repostChainIds  String[]         @db.ObjectId

  authorId        String  @db.ObjectId
  repostingPostId String? @db.ObjectId
  parentPostId    String? @db.ObjectId

  postHashtags     PostHashtag[]      @relation(name: "PostHashtag")
  postCryptoTopics PostCryptoTopic[]  @relation(name: "PostCryptoTopic")
  author           User               @relation(name: "UserPost", fields: [authorId], references: [id], onDelete: NoAction)
  repostingPost    Post?              @relation(name: "Repost", references: [id], fields: [repostingPostId], onDelete: NoAction, onUpdate: NoAction)
  repostedOnPosts  Post[]             @relation(name: "Repost")
  parentPost       Post?              @relation(name: "PostTree", references: [id], fields: [parentPostId], onDelete: NoAction, onUpdate: NoAction)
  childPosts       Post[]             @relation(name: "PostTree")
  moderationHits   ModerationRecord[] @relation(name: "PostModerationHit")
  postLikes        PostLike[]         @relation(name: "PostPostLike")
  postSaves        PostSave[]         @relation(name: "PostPostSave")
}

type UserMedia {
  url     String
  type    UserMediaType
  altText String?
}

type TextualContext {
  href String?
  text String
}

enum UserMediaType {
  IMAGE
  VIDEO
}

model PostLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  postId String @db.ObjectId
  userId String @db.ObjectId

  post Post @relation(name: "PostPostLike", references: [id], fields: [postId], onDelete: Cascade)
  user User @relation(name: "UserPostLike", references: [id], fields: [userId], onDelete: Cascade)

  @@unique([postId, userId])
}

model PostSave {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  postId String @db.ObjectId
  userId String @db.ObjectId

  post Post @relation(name: "PostPostSave", references: [id], fields: [postId], onDelete: Cascade)
  user User @relation(name: "UserPostSave", references: [id], fields: [userId], onDelete: Cascade)

  @@unique([postId, userId])
}

model PostHashtag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tagText   String
  createdAt DateTime @default(now())

  postId String @db.ObjectId

  post Post @relation(name: "PostHashtag", references: [id], fields: [postId], onDelete: Cascade)

  @@unique([tagText, postId])
  @@index([tagText])
}

model PostCryptoTopic {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cryptoId  String
  createdAt DateTime @default(now())

  postId String @db.ObjectId

  post Post @relation(name: "PostCryptoTopic", references: [id], fields: [postId], onDelete: Cascade)

  @@unique([cryptoId, postId])
  @@index([cryptoId])
}

//////////////////////
// Group C: Moderation
//////////////////////

model ModerationRecord {
  id         String                 @id @default(auto()) @map("_id") @db.ObjectId
  descriptor String
  comment    String
  targetType ModerationTargetType[]
  details    Json[] // Mock-up: [{ table: { field: { field: { from: "", to: "" | null } } } }]
  createdAt  DateTime               @default(now())

  initiatorId  String  @db.ObjectId
  targetUserId String? @db.ObjectId
  targetPostId String? @db.ObjectId

  initiator  User  @relation(name: "UserModerationRecord", references: [id], fields: [initiatorId], onDelete: NoAction)
  targetUser User? @relation(name: "UserModerationHit", references: [id], fields: [targetUserId], onDelete: NoAction)
  targetPost Post? @relation(name: "PostModerationHit", references: [id], fields: [targetPostId], onDelete: NoAction)
}

enum ModerationTargetType {
  USER
  POST
}

//////////////////////
// Group D: Others
//////////////////////

model Crypto {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cryptoId  String   @unique
  symbol    String
  name      String
  priceUsd  Float
  updatedAt DateTime @updatedAt
}

model SystemMetadata {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  key   String @unique
  value Json
}

// stores temporarily-uploaded media
model MediaStash {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  createdAt DateTime @default(now())
  expiry    DateTime
}
